@page "/products"
@using session26_validation_component_razor.Components

<div class="container">
    <div class="d-flex justify-content-between align-item-center my-4">
        <h2 class="text-center">Danh s√°ch s·∫£n ph·∫©m</h2>
        <button class="btn btn-secondary position-relative" data-bs-toggle="modal" data-bs-target="#cartModal">
            <i class="fa fa-shopping-cart"></i>
            @* th·∫ª span ƒë·ªÉ hi·ªÉn th·ªã s·ªë l∆∞·ª£ng s·∫£n ph·∫©m tr√™n gi·ªè h√†ng *@
            <span class="position-absolute bg-danger rounded-pill top-0 start-100 translate-middle badge">
                @Cart.Sum(product => product.Quantity)
            </span>
        </button>
    </div>
</div>

@* Popup gi·ªè h√†ng *@
<div class="modal fade" id="cartModal" tabindex="-1" aria-labelledby="cartModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cartModalLabel">üõí Gi·ªè h√†ng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @* truy·ªÅn s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong Cart ra UI *@
                @if (Cart.Any())
                {
                    <ul class="list-group">
                        @foreach (var item in Cart)
                        {
                            <li class="d-flex justify-content-between align-items-center list-group-item">
                                <div>
                                    <strong>@item.Name</strong>
                                    <span>@item.Quantity</span>
                                </div>
                                <span class="text-danger fw-bold">@((Convert.ToDouble(item.Price)*item.Quantity))</span>
                            </li>
                        }
                    </ul>
                }
                else {
                    <p class="text-center text-muted">Gi·ªè h√†ng tr·ªëng</p>
                }

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ƒê√≥ng</button>
                <button type="button" class="btn btn-success">Thanh to√°n</button>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        @foreach (var product in products)
        {
            <div class="col-md-4 mb-4">
                <ProductItem Product="product" OnAddToCart="HandleAddToCart">
                    <p class="text-danger text-center">S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao</p>
                </ProductItem>
            </div>
        }
    </div>
</div>

@code {
    private List<ProductModel> products = new() {
    new ProductModel{
        Id = "1",
        Name = "SH 2024",
        Price = "60000000",
        ImageUrl = "sh_mode2025.png",
        Quantity = 10
    },
    new ProductModel{
        Id = "2",
        Name = "SH 2025",
        Price = "65000000",
        ImageUrl = "sh_mode2025.png",
        Quantity = 11
    },
    new ProductModel{
        Id = "3",
        Name = "SH 2023",
        Price = "60000000",
        ImageUrl = "sh_mode2025.png",
        Quantity = 9
    },
        new ProductModel{
        Id = "4",
        Name = "SH 2022",
        Price = "60000000",
        ImageUrl = "sh_mode2025.png",
        Quantity = 9
    },
};

    @* t·∫°o object Carts ƒë·ªÉ ch·ª©a danh s√°ch s·∫£n ph·∫©m tr√™n gi·ªè h√†ng *@
    private List<ProductModel> Cart = new();

    @* h√†m handle vi·ªác th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng *@
    @* g·ª≠i h√†m n√†y xu·ªëng cho component con ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu *@
    private void HandleAddToCart(ProductModel product)
    {
        var existingProduct = Cart.FirstOrDefault(p => p.Name == product.Name);

        if (existingProduct != null)
        {
            existingProduct.Quantity++;
        }
        else
        {
            Cart.Add(new ProductModel
            {
                Name = product.Name,
                Price = product.Price,
                ImageUrl = product.ImageUrl,
                Quantity = 1
            });
        }
    }
}